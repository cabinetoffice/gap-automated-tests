name: Feature Workflow

on:
  schedule:
    - cron: "0 4 * * 1-5" # every weekday at 4am
  workflow_dispatch:
    inputs:
      suite:
        type: choice
        description: Select test suite
        default: all
        options:
        - all
        - find
        - apply
        - admin
        - superadmin
  push:
    branches:
      - feature/**
      - fix/**
      - bug/**
      - develop
      - main
      - TD**
      - GAP**
    paths-ignore:
      - '*.md'
  pull_request:
    branches:
      - fix/**
      - feature/**
      - develop
      - TD**
      - GAP**
    paths-ignore:
      - '*.md'
jobs:
  addToVPC:
    runs-on: ubuntu-18.04
    steps:
    - name: Get Github action IP
      id: ip
      uses: haythem/public-ip@v1.2
      
    - name: Add Github Actions IP to Security group
      run: |
        aws ec2 authorize-security-group-ingress --group-name ${{ secrets.AWS_SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32    
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
  

  Build:
    name: Build Feature
    runs-on: ubuntu-latest
    
    steps:

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
    
      # ==============================
      - name: Dump context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "${GITHUB_CONTEXT}"
      # ==============================

      - name: Checkout repo
        uses: actions/checkout@master

      - name: Generate .env
        run: |
          cat << EOF > .env

          ONE_LOGIN_SANDBOX_BASE_URL=signin.integration.account.gov.uk
          ONE_LOGIN_SANDBOX_USERNAME=example_user
          ONE_LOGIN_SANDBOX_PASSWORD=example_password
          ONE_LOGIN_APPLICANT_EMAIL=example+applicant@and.digital
          ONE_LOGIN_APPLICANT_PASSWORD=example_password
          ONE_LOGIN_ADMIN_EMAIL=example+admin@and.digital
          ONE_LOGIN_ADMIN_PASSWORD=example_password
          ONE_LOGIN_SUPER_ADMIN_EMAIL=example+super_admin@and.digital
          ONE_LOGIN_SUPER_ADMIN_PASSWORD=example_password
          CYPRESS_USERS_DATABASE_URL =postgres://postgres:postgres@localhost:5432
          CYPRESS_USERS_DATABASE_NAME=userdbname
          CYPRESS_APPLY_DATABASE_URL =postgres://postgres:postgres@localhost:5432
          CYPRESS_APPLY_DATABASE_NAME=applydbname
          CONTENTFUL_SPACE_ID=spaceId
          CONTENTFUL_ACCESS_TOKEN=accessToken
          CONTENTFUL_ENVIRONMENT_ID=environmentId
          APPLICATION_BASE_URL=www.google.com
          
          EOF

      - name: Setup node
        uses: actions/setup-node@master
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Snyk setup
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --fail-on=all
          
      - name: Cache dependencies
        uses: actions/cache@v2
        id: npm-cache
        with:
          path: |
            ${{ steps.npm-cache-dir-path.outputs.dir }}
            **/node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: |
          npm ci

      - name: Run Tests
        run: |
          npm run cy:run:${{ github.event.inputs.suite }}

  removeFromVPC:
    runs-on: ubuntu-18.04
    steps:
    - name: Remove Github Actions IP from security group
      run: |
        aws ec2 revoke-security-group-ingress --group-name ${{ env.AWS_SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
      if: always()
      

 # =============================
