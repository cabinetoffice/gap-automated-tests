name: Feature Workflow

on:
  schedule:
    - cron: "0 4 * * 1-5" # every weekday at 4am
  workflow_dispatch:
    inputs:
      suite:
        type: choice
        description: Select test suite
        default: all
        options:
        - all
        - find
        - apply
        - admin
        - superadmin
  push:
    branches:
      - feature/**
      - fix/**
      - bug/**
      - develop
      - main
      - TD**
      - GAP**
    paths-ignore:
      - '*.md'
  pull_request:
    branches:
      - fix/**
      - feature/**
      - develop
      - TD**
      - GAP**
    paths-ignore:
      - '*.md'
jobs:
  addToVPC:
    runs-on: ubuntu-18.04
    steps:
    - name: Get Github action IP
      id: ip
      uses: haythem/public-ip@v1.2
      
    - name: Add Github Actions IP to Security group
      run: |
        aws ec2 authorize-security-group-ingress --group-name ${{ secrets.AWS_SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32    
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  


  Build:
    name: Build Feature
    runs-on: ubuntu-latest
    
    steps:

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
    
      # ==============================
      - name: Dump context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "${GITHUB_CONTEXT}"
      # ==============================

      - name: Checkout repo
        uses: actions/checkout@master

      - name: Generate .env
        run: |
          cat << EOF > .env
          CONTENTFUL_SPACE_ID=${{ secrets.QA_CONTENTFUL_SPACE_ID }}
          CONTENTFUL_ACCESS_TOKEN=${{ secrets.QA_CONTENTFUL_ACCESS_TOKEN }}
          CONTENTFUL_PREVIEW_ACCESS_TOKEN=${{ secrets.QA_CONTENTFUL_PREVIEW_ACCESS_TOKEN }}
          CONTENTFUL_ENVIRONMENT=${{ secrets.QA_CONTENTFUL_ENVIRONMENT }}
          ELASTIC_INDEX=${{ secrets.QA_ELASTIC_INDEX }}
          ELASTIC_URL=${{ secrets.QA_ELASTIC_URL }}
          ELASTIC_USERNAME=${{ secrets.QA_ELASTIC_USERNAME }}
          ELASTIC_PASSWORD=${{ secrets.QA_ELASTIC_PASSWORD }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          GOV_NOTIFY_NOTIFICATION_EMAIL_TEMPLATE=${{ secrets.GOV_NOTIFY_NOTIFICATION_EMAIL_TEMPLATE }}
          GOV_NOTIFY_NOTIFICATION_EMAIL_TEMPLATE_UNSUBSCRIBE=${{ secrets.GOV_NOTIFY_NOTIFICATION_EMAIL_TEMPLATE_UNSUBSCRIBE }}
          GOV_NOTIFY_API_KEY=${{ secrets.GOV_NOTIFY_API_KEY }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          DATABASE_SSL=true
          ENABLE_FAQ_TAB=false
          ENABLE_AWARDS_TAB=false
          HOST=${{ secrets.QA_ENVIRONMENT_URL }}
          BACKEND_HOST=${{ secrets.QA_BACKEND_HOST }}
          BASIC_AUTH_USERNAME=${{ secrets.BASIC_AUTH_USERNAME }}
          BASIC_AUTH_PASSWORD=${{ secrets.BASIC_AUTH_PASSWORD }}
          VERIFICATION_JWT_EXPIRY_TIME=${{ secrets.VERIFICATION_JWT_EXPIRY_TIME }}
          ENCRYPTION_KEY_NAME=${{ secrets.QA_ENCRYPTION_KEY_NAME }}
          ENCRYPTION_KEY_NAMESPACE=${{ secrets.QA_ENCRYPTION_KEY_NAMESPACE }}
          ENCRYPTION_ORIGIN=${{ secrets.QA_ENCRYPTION_ORIGIN }}
          ENCRYPTION_STAGE=${{ secrets.QA_ENCRYPTION_STAGE }}
          ENCRYPTION_WRAPPING_KEY=${{ secrets.QA_ENCRYPTION_WRAPPING_KEY }}
          GOV_NOTIFY_SAVED_SEARCH_CONFIRMATION_TEMPLATE=${{ secrets.QA_GOV_NOTIFY_SAVED_SEARCH_CONFIRMATION_TEMPLATE }}
          APPLY_FOR_A_GRANT_APPLICANT_URL=${{ secrets.QA_APPLY_FOR_A_GRANT_APPLICANT_URL}}
          EOF

      - name: Setup node
        uses: actions/setup-node@master
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Snyk setup
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --fail-on=all
          
      - name: Cache dependencies
        uses: actions/cache@v2
        id: npm-cache
        with:
          path: |
            ${{ steps.npm-cache-dir-path.outputs.dir }}
            **/node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: |
          npm ci

      - name: Run Tests
        run: |
          npm run cy:run:${{ github.event.inputs.suite }}

      

 # =============================
