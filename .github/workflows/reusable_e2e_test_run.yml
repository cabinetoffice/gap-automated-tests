name: Reusable E2E Test Run

on:
  workflow_call:
    inputs:
      suite:
        default: all
        type: string
      browser:
        default: chrome
        type: string
      report:
        default: false
        type: string
      environment:
        default: SANDBOX
        type: string

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cypress install
        uses: cypress-io/github-action@v6
        with:
          # Disable running of tests within install job
          runTests: false
          build: npm run build

      - name: Save build folder
        uses: actions/upload-artifact@v3
        with:
          name: build
          if-no-files-found: error
          path: dist
          
  reusable_e2e_test_run:
    needs: install
    name: Run E2E Tests env:${{ inputs.environment }} suite:${{ inputs.suite }} browser:${{ inputs.browser }}
    runs-on: ubuntu-latest
    concurrency: e2e_test_run_${{ inputs.environment }}
    # GitHub Actions doesn't have ternaries for some reason, so this only sets the environment if we want reports
    # (so it doesn't ping every time someone pushes)
    environment: ${{ inputs.report == 'true' && inputs.environment || '' }}

    steps:
      - name: Get Github action IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Add Github Actions IP to Security group
        run: |
          echo "${{ steps.ip.outputs.ipv4 }}"
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets[format('{0}_AWS_VPC_SG_ID', inputs.environment)] }} --protocol tcp --port 5432 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}

      - name: Checkout repo
        uses: actions/checkout@master

      - name: Download the build folder
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build

      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          browser: ${{ inputs.browser }}
          spec: ${{ inputs.suite == 'all' && 'cypress/**' || inputs.suite == 'cypress/e2e/superadmin' && 'cypress/e2e/super-admin' || ('cypress/e2e/' + inputs.suite) }}/*.cy.js
        env:
          CYPRESS_ONE_LOGIN_BASE_URL: ${{ secrets[format('{0}_ONE_LOGIN_BASE_URL', inputs.environment)] }}
          CYPRESS_ONE_LOGIN_USERNAME: ${{ secrets[format('{0}_ONE_LOGIN_USERNAME', inputs.environment)] }}
          CYPRESS_ONE_LOGIN_PASSWORD: ${{ secrets[format('{0}_ONE_LOGIN_PASSWORD', inputs.environment)] }}
          CYPRESS_APPLICATION_BASE_URL: ${{ secrets[format('{0}_APPLICATION_BASE_URL', inputs.environment)] }}
          CYPRESS_POST_LOGIN_BASE_URL: ${{ secrets[format('{0}_POST_LOGIN_BASE_URL', inputs.environment)] }}
          CYPRESS_ONE_LOGIN_APPLICANT_EMAIL: ${{ secrets.ONE_LOGIN_APPLICANT_EMAIL }}
          CYPRESS_ONE_LOGIN_APPLICANT_PASSWORD: ${{ secrets.ONE_LOGIN_APPLICANT_PASSWORD }}
          CYPRESS_ONE_LOGIN_APPLICANT_SUB: ${{ secrets[format('{0}_ONE_LOGIN_APPLICANT_SUB', inputs.environment)] }}
          CYPRESS_ONE_LOGIN_ADMIN_EMAIL: ${{ secrets.ONE_LOGIN_ADMIN_EMAIL }}
          CYPRESS_ONE_LOGIN_ADMIN_PASSWORD: ${{ secrets.ONE_LOGIN_ADMIN_PASSWORD }}
          CYPRESS_ONE_LOGIN_ADMIN_SUB: ${{ secrets[format('{0}_ONE_LOGIN_ADMIN_SUB', inputs.environment)] }}
          CYPRESS_ONE_LOGIN_SUPER_ADMIN_EMAIL: ${{ secrets.ONE_LOGIN_SUPER_ADMIN_EMAIL }}
          CYPRESS_ONE_LOGIN_SUPER_ADMIN_PASSWORD: ${{ secrets.ONE_LOGIN_SUPER_ADMIN_PASSWORD }}
          CYPRESS_ONE_LOGIN_SUPER_ADMIN_SUB: ${{ secrets[format('{0}_ONE_LOGIN_SUPER_ADMIN_SUB', inputs.environment)] }}
          CYPRESS_AWS_VPC_SG_ID: ${{ secrets[format('{0}_AWS_VPC_SG_ID', inputs.environment)] }}
          CYPRESS_USERS_DATABASE_URL: ${{ secrets[format('{0}_USERS_DATABASE_URL', inputs.environment)] }}
          CYPRESS_USERS_DATABASE_NAME: ${{ secrets[format('{0}_USERS_DATABASE_NAME', inputs.environment)] }}
          CYPRESS_APPLY_DATABASE_URL: ${{ secrets[format('{0}_APPLY_DATABASE_URL', inputs.environment)] }}
          CYPRESS_APPLY_DATABASE_NAME: ${{ secrets[format('{0}_APPLY_DATABASE_NAME', inputs.environment)] }}
          CYPRESS_CONTENTFUL_SPACE_ID: ${{ secrets.CONTENTFUL_SPACE_ID }}
          CYPRESS_CONTENTFUL_ACCESS_TOKEN: ${{ secrets[format('{0}_CONTENTFUL_ACCESS_TOKEN', inputs.environment)] }}
          CYPRESS_CONTENTFUL_ENVIRONMENT_ID: ${{ vars[format('{0}_CONTENTFUL_ENVIRONMENT_ID', inputs.environment)] }}
          CYPRESS_FIRST_USER_ID: 1
          
      - name: Remove Github Actions IP from security group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets[format('{0}_AWS_VPC_SG_ID', inputs.environment)] }} --protocol tcp --port 5432 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
        if: always()

      - name: Upload Report to S3
        # there should be only one report generated from the run, so grab it for manipulation
        # the filename will either start with pass_ or fail_ and we want to put the browser info between this status and the timestamp
        # so replace any instance of pass_ with pass_{browser}_
        # then replace any instance of fail_ with fail_{browser}_
        # then rename the file to this new name so that the browser info is attached to the report
        # then upload to s3 as normal
        run: |
          FILE_PATH="/home/runner/work/gap-automated-tests/gap-automated-tests/mochawesome-report"
          OLD_FILENAME=$(ls -a -d $FILE_PATH/*)
          NEW_PASS_FILENAME=${OLD_FILENAME/pass_/pass_${{ inputs.browser }}_}
          NEW_FAIL_FILENAME=${NEW_PASS_FILENAME/fail_/fail_${{ inputs.browser }}_}
          mv $OLD_FILENAME $NEW_FAIL_FILENAME
          aws s3 cp $FILE_PATH/ s3://gap-automated-tests/${{ inputs.environment }} --recursive --exclude "*" --include "*.html"
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
        if: ${{ !cancelled() && inputs.report == 'true' }}

      - name: Presign S3 report for sharing
        run: |
          FILE_PATH="/home/runner/work/gap-automated-tests/gap-automated-tests/mochawesome-report"
          FULL_FILE_PATH=$(ls -a -d $FILE_PATH/*)
          FILENAME=${FULL_FILE_PATH/$FILE_PATH/}
          aws s3 presign s3://gap-automated-tests/${{ inputs.environment }}$FILENAME --expires-in 604800
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
        if: ${{ !cancelled() && inputs.report == 'true' }}
